#+PROPERTY: header-args+ :var  SKOOPPI="192.168.1.15"
#+PROPERTY: TOC       :include all :depth 3 :force (depth)


#+RESULTS:
: export SKOOPPI=192.168.1.15




* Hacklab Helsinki E-room  Automation Helpers
:PROPERTIES:
:TOC:      :include all :depth 3
:END:

:CONTENTS:
- [[#hacklab-helsinki-e-room--automation-helpers][Hacklab Helsinki E-room  Automation Helpers]]
  - [[#oscilloscpe-discovery-and-screenshot-using-lxi--tool][Oscilloscpe discovery and screenshot using lxi -tool]]
  - [[#oscilloscope-lxi-screenshot-using-os-tools-netcat][Oscilloscope LXI screenshot using OS-tools (netcat)]]
  - [[#emacs-variables][Emacs variables]]
:END:

** Oscilloscpe discovery and screenshot using ~lxi~ -tool

 Run ~lxi discover~ to search for LXI compatible machines accessible
 from this PC.
 #+name: lxi-discover
 #+BEGIN_SRC bash :eval no-export :results output :exports both
 lxi discover
 #+END_SRC

 #+RESULTS: lxi-discover
 : Searching for LXI devices - please wait...
 : 
 : Broadcasting on interface lo
 : Broadcasting on interface eno1
 :   Found "RIGOL TECHNOLOGIES,DS1104Z,DS1ZB192000144,00.04.04.SP3" on address 192.168.120.56
 : Broadcasting on interface docker0
 : 
 : Found 1 device 
 : 

 One liner to extract IP-address from  ~lxi~ tool output:
 #+name: lxi-ip
 #+BEGIN_SRC bash :eval no-export :results output :exports both
 lxi discover | grep 'DS1104Z' | grep -oE '192\.[0-9]+\.[0-9]+\.[0-9]+' 
 #+END_SRC

 #+RESULTS: lxi-ip
 : 192.168.120.56


 #+BEGIN_SRC bash :eval no-export :results output :var SKOOPPI=lxi-ip
 # SKOOPPI=$(lxi discover | grep 'DS1104Z' | grep -oE '192\.[0-9]+\.[0-9]+\.[0-9]+')
 echo Screenshot for SKOOPPI=$SKOOPPI
 lxi screenshot -a $SKOOPPI pics/lxi-output.png
 #+END_SRC

 #+RESULTS:
 : Screenshot for SKOOPPI=192.168.120.56
 : Saved screenshot image to pics/lxi-output.png


 Sceenshot taken:
 [[file:pics/lxi-output.png]]


** Oscilloscope LXI screenshot using OS-tools (~netcat~)

  Set environment variable ~SKOOPPI~ to the IP-address of the
  oscilloscope.
#+BEGIN_SRC bash :eval no-export :results output :exports results :var SKOOPPI=lxi-ip
echo export SKOOPPI=$SKOOPPI
#+END_SRC

#+RESULTS:
: export SKOOPPI=192.168.120.56

  Ping IP-address 
  #+BEGIN_SRC bash :eval no-export :results output :var SKOOPPI=lxi-ip
  ping -c 2 $SKOOPPI
  #+END_SRC

  #+RESULTS:
  : PING 192.168.120.56 (192.168.120.56) 56(84) bytes of data.
  : 64 bytes from 192.168.120.56: icmp_seq=1 ttl=255 time=0.273 ms
  : 64 bytes from 192.168.120.56: icmp_seq=2 ttl=255 time=0.290 ms
  : 
  : --- 192.168.120.56 ping statistics ---
  : 2 packets transmitted, 2 received, 0% packet loss, time 1020ms
  : rtt min/avg/max/mdev = 0.273/0.281/0.290/0.008 ms

  Take a screenshot using ~netcat~ using the idea presented in
  https://www.theimpossiblecode.com/blog/rigol-ds1054z-screen-capture-linux/.

  Options passed to ~netcat~:
  - ~-N~: 'shutdown(2) the network socket after EOF on the
  input.'. 
  - ~-w~: idle timeout

  #+BEGIN_SRC bash :eval no-export :results output file :var SKOOPPI=lxi-ip :expors both
    IMG=pics/netcat-example.bmp
    echo ':display:data?' |  netcat -w 20 -N $SKOOPPI 5555 | tail -c +12 > $IMG
    echo -n  $IMG
  #+END_SRC

  #+RESULTS:
  [[file:pics/netcat-example.bmp]]



  #+BEGIN_SRC bash :eval no-export :results output
  echo 'ACQ:TYPE?' |  netcat -w 20 -N $SKOOPPI 5555
  #+END_SRC

  #+RESULTS:
  : NORM

  
  #+BEGIN_SRC bash :eval no-export :results output :exports both
  echo '*IDN?' |  netcat -q 10 $SKOOPPI 5555
  #+END_SRC

  #+RESULTS:
  : RIGOL TECHNOLOGIES,MSO1104Z,DS1ZC210200015,00.04.04.SP4


  #+BEGIN_SRC bash :eval no-export :results output :exports both
  echo '*IDN?' |  netcat -w 20 -N $SKOOPPI 5555
  #+END_SRC

  

  #+RESULTS:
  : RIGOL TECHNOLOGIES,MSO1104Z,DS1ZC210200015,00.04.04.SP4




* Fin                                                              :noexport:


** Emacs variables

   We set some file local variables for emacs users.
   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # eval: (add-hook 'before-save-hook 'org-make-toc)
   # End:
   #



